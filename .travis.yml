language: c

matrix:
  include:
      # Linux
      - os: linux
        dist: disco
        name: "Ubuntu disco"
        env:
          - NEURON_VERSION=7.7
        services:
          - docker
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - xvfb

      - os: linux
        dist: bionic
        name: "Ubuntu bionic"
        env:
          - NEURON_VERSION=7.7
        services:
          - docker
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - xvfb

      - os: linux
        dist: xenial
        name: "Ubuntu xenial"
        env:
          - NEURON_VERSION=7.7
        services:
          - docker
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - xvfb

      # OSX
      - os: osx
        name: "MacOS mojave"
        osx_image: xcode11.3
        env:
          - PYTHON_VERSION=3.7
          - NEURON_VERSION=7.7
          - HOMEBREW_NO_AUTO_UPDATE=1

      - os: osx
        name: "MacOS high sierra"
        osx_image: xcode10.1
        env:
          - PYTHON_VERSION=3.7
          - NEURON_VERSION=7.7
          - HOMEBREW_NO_AUTO_UPDATE=1
          - BUILD_QEMU=1

      - os: osx
        name: "MacOS sierra"
        osx_image: xcode9.2
        env:
          - PYTHON_VERSION=3.7
          - NEURON_VERSION=7.7
          - HOMEBREW_NO_AUTO_UPDATE=1
          - HOMEBREW_QEMU=1
          - HOMEBREW_SDKROOT=

      - os: osx
        name: "MacOS el capitan"
        osx_image: xcode8
        env:
          - PYTHON_VERSION=3.7
          - NEURON_VERSION=7.7
          - HOMEBREW_NO_AUTO_UPDATE=1
          - BREW_UNTAP=1
          - HOMEBREW_QEMU=1
          - HOMEBREW_SDKROOT=

      # Windows
      - os: windows
        name: "Windows"
        env:
          - PYTHON_VERSION=3.7
          - NEURON_VERSION=7.7

before_install:
  - set -e
  - |
    export TRAVIS_TESTING=1

    source scripts/utils.sh
    source scripts/docker_functions.sh
    export LOGFILE="hnn_travis.log"
    set_globals

    # override cleanup function in docker_functions.sh
    function cleanup {
      check_var LOGFILE

      local __failed

      __failed=$1

      echo -e "\n=====================" >> $LOGFILE
      echo "cleanup() called from: ${FUNCNAME[1]} (L:${BASH_LINENO[0]})" >> $LOGFILE

      if [[ $__failed -ne "0" ]]; then
        echo -e "\n======================================"
        echo "Error: Please see log output for more details"
        cat $LOGFILE
        return $__failed
      fi
    }

    export -f cleanup

    export DOCKER_IMAGE_NAME="jonescompneurolab/hnn:master"
    export BASE_QEMU_OPTS="--disable-cocoa --disable-curses --disable-vnc --disable-vde \
                          --disable-pie --disable-libusb --disable-hax --disable-kvm \
                          --disable-debug-info --disable-docs --disable-nettle \
                          --disable-sparse --disable-guest-agent --disable-qom-cast-debug \
                          --disable-lzo --disable-bzip2 --disable-fdt \
                          --disable-tpm --disable-replication --disable-modules --disable-blobs \
                          --disable-gnutls --disable-vhost-crypto --disable-live-block-migration \
                          --disable-user --disable-vhost-net"

  - |
    if [ "${TRAVIS_OS_NAME}" == "osx" ]; then  # install osx prerequisites
      scripts/setup-travis-mac.sh

      # set up DISPLAY and make sure that xquartz is ready
      check_xquartz_listening || {
        cat $LOGFILE
      }
      # This will make sure that xquartz is running. We will configure it to
      # accept TCP connections in hnn_docker.sh later
      xset -display $DISPLAY -q > /dev/null

      export PATH=${HOME}/miniconda/bin:$PATH
      export PATH=$PATH:/Applications/NEURON-${NEURON_VERSION}/nrn/x86_64/bin
      export PYTHONPATH=/Applications/NEURON-${NEURON_VERSION}/nrn/lib/python:$PYTHONPATH
      export PATH=$PATH:/Applications/Docker.app/Contents/Resources/bin
      export PYTHON=python3
      eval "$(docker-machine env default)"

      source activate hnn && echo "activated conda HNN environment"
    fi
  - |
    if [ "${TRAVIS_OS_NAME}" == "windows" ]; then  # install windows prerequisites
      scripts/setup-travis-windows.sh

      # add miniconda python to the path
      export PATH=$PATH:$HOME/Miniconda3/Scripts
      export PATH=$HOME/Miniconda3/envs/hnn/:$PATH
      export PATH=$HOME/Miniconda3/envs/hnn/Scripts:$PATH
      export PATH=$HOME/Miniconda3/envs/hnn/Library/bin:$PATH

      # set other variables for neuron and HNN
      export PATH=$PATH:/c/nrn/bin
      export DISPLAY="localhost:0"
      export NEURONHOME=/c/nrn
      export PYTHON=python
    fi
  - |
    if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
      echo "Starting fake Xserver"
      Xvfb :0 -listen tcp -screen 0 1024x768x24 > /dev/null &
      export DISPLAY=:0
      export PATH=/usr/bin:/usr/local/bin:$PATH
      echo "Starting Ubuntu install script"
      bash -xe ./installer/ubuntu/installer.sh
      echo "Install finished"
      NLOPT_LIB=$(ls -d $HOME/.local/lib/python*/site-packages)
      echo $NLOPT_LIB
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$NLOPT_LIB
      export PYTHON=python3
      xset -display $DISPLAY -q > /dev/null;
    fi

install:
  - if [[ ! "${TRAVIS_OS_NAME}" == "windows" ]]; then
      make;
    fi;
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [[ "$TRAVIS_PULL_REQUEST" =~ "false" ]]; then
        SOURCE_REPO="https://github.com/${TRAVIS_REPO_SLUG}.git"
        SOURCE_BRANCH=$TRAVIS_BRANCH
      else
        SOURCE_REPO="https://github.com/${TRAVIS_PULL_REQUEST_SLUG}.git"
        SOURCE_BRANCH=$TRAVIS_PULL_REQUEST_BRANCH
      fi
      echo "Starting docker build..."
      (docker build --tag jonescompneurolab/hnn \
        --build-arg NEURON_VERSION=${NEURON_VERSION} \
        --build-arg SOURCE_BRANCH=${SOURCE_BRANCH} \
        --build-arg SOURCE_REPO=${SOURCE_REPO} \
        installer/docker > docker_build.txt 2>&1 || echo "Failed build" >> docker_build.txt) &
    fi
  - pip install flake8 pytest pytest-cov coverage coveralls mne

script:
  - echo "Running Python tests" && py.test tests/
  - echo "Testing GUI on host OS" && $PYTHON hnn.py
  - |
    if [[ "${TRAVIS_OS_NAME}" = "linux" ]]; then
      echo "Waiting on docker build:"
      cat docker_build.txt
      while ! cat docker_build.txt|grep "Successfully built"; do
        if cat docker_build.txt|grep "Failed build"; then
          exit 2
        fi
        cp docker_build.txt docker_build.txt.old
        diff docker_build.txt docker_build.txt.old > /dev/null || (tail -1 docker_build.txt && echo)
        sleep 10
      done
      tail -1 docker_build.txt
    else
      while ! test -e $HOME/docker_image_loaded; do
        echo "Sleeping for 10s while waiting for docker image download to complete"
        sleep 10
      done
    fi
  - |
    if [[ "${TRAVIS_OS_NAME}" = "windows" ]]; then
      echo "Testing GUI in docker without ssh as user 'test user'"
      powershell -executionpolicy bypass -File "scripts\start-test-as-user.ps1"
    else
      echo "Testing GUI in docker without ssh"
      USE_SSH=0 ./hnn_docker.sh start || script_fail
    fi
  - |
    if [[ "${TRAVIS_OS_NAME}" = "linux" ]]; then
      echo "Testing MPI in docker"
      make clean
      # only run on linux because it's not virtualized through qemu
      timeout 120 docker exec hnn_container bash -c "sudo apt-get install --no-install-recommends -y \
        make gcc libc6-dev libtinfo-dev libncurses-dev libx11-dev libreadline-dev"
      timeout 300 docker exec -u $UID:hnn_group hnn_container bash -c "make && source /home/hnn_user/hnn_envs && \
        mpiexec -np 2 --oversubscribe nrniv -mpi -python run.py param/default.param && echo finished simulation" || { \
          echo -e "\nMPI test failed\n"
          docker ps -a | grep hnn_container
          false
        }
      echo "Testing hnn_docker.sh upgrade" && ./hnn_docker.sh upgrade || script_fail
    fi
  - |
    if [[ ! "${TRAVIS_OS_NAME}" = "windows" ]]; then
      echo "Testing GUI in docker with ssh" && USE_SSH=1 ./hnn_docker.sh start || script_fail
      echo "Testing hnn_docker.sh uninstall command" && ./hnn_docker.sh uninstall || script_fail
    fi
